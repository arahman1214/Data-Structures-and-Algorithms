Arrays:

1. Set Matrix Zero


This solution does not work with negative values in a matrix.

** Instead of -1 use ask the interviewer about the type of elements in the matrix and use either a str(“.”) or float values accordingly.

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        
        """

        m=len(matrix)
        n=len(matrix[0])
        for i in range(0,m):
            for j in range(0,n):
                if matrix[i][j]==0:
                    idx=i-1
                    while(idx>=0):
                        if matrix[idx][j]!=0:
                            matrix[idx][j]=-1		# imp
                        idx=idx-1		# imp
                    idx=i+1
                    while(idx<m):
                        if matrix[idx][j]!=0:
                            matrix[idx][j]=-1
                        idx=idx+1			# imp
                    idx=j-1
                    while(idx>=0):
                        if matrix[i][idx]!=0:
                            matrix[i][idx]=-1
                        idx=idx-1
                    idx=j+1
                    while(idx<n):
                        if matrix[i][idx]!=0:		# imp
                            matrix[i][idx]=-1
                        idx=idx+1

        for i in range(0,m):
            for j in range(0,n):
                if matrix[i][j]==-1:
                    matrix[i][j]=0
                    
Time Complexity:O((N*M)*(N + M)). O(N*M) for traversing through each element and (N+M)for traversing to row and column of elements having value 0.     



             
  # OPTIMIZED 1
    
        m=len(matrix)
        n=len(matrix[0])
        row_list=[-1]*m
        col_list=[-1]*n
        
        for i in range(0,m):
            for j in range(0,n):
                if matrix[i][j]==0:
                    row_list[i]=0
                    col_list[j]=0

        for i in range(0,m):
            for j in range(0,n):
                if row_list[i]==0 or col_list[j]==0:
                        matrix[i][j]=0

Time Complexity: O(N*M + N*M)
Space Complexity: O(N)
 
 
 
 
 
#OPTIMIZED 2
        col_0=1
        m=len(matrix)
        n=len(matrix[0])
        for i in range(0,m):
            if matrix[i][0]==0:
                col_0=0
            for j in range(1,n):
                if matrix[i][j]==0:
                    matrix[i][0]=matrix[0][j]=0
        i=m-1
        j=n-1
        while(i>=0):
            while(j>=1):
                if matrix[i][0]==0 or matrix[0][j]==0:
                    matrix[i][j]=0
                j=j-1
            if col_0==0:
                matrix[i][0]=0
            i=i-1

>Refer submissions

2. Program to generate Pascal’s Triangle
    
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        result=[]
        for i in range(1,numRows+1):
            if i==1:
                result.append([1])
            elif i==2:
                result.append([1,1])
            else:
                l=[0]*i
                l[0]=1
                l[-1]=1
                for j in range(1,len(l)-1):
                    l[j]=result[i-2][j-1]+result[i-2][j]
                result.append(l)
        return (result)

  Time Complexity: We are creating a 2D array of size (numRows * numCols) (where 1 <= numCols <= numRows), and we are traversing through each of the cells to update it with its correct value, so Time Complexity = O(numRows2).
Space Complexity: Since we are creating a 2D array, space complexity = O(numRows2).



3. Next_permutation : find next lexicographically greater permutation

#USING INBUILT LIB

import itertools
nums=[1,2,3]
perms=list(itertools.permutations(nums))
print(perms)
for i in range(0,len(perms)):
    if list(perms[i])==nums:
        print(list(perms[i+1]))
        break

        
    
        
#BRUTE FORCE




# Using extra space
# Time complexity: N*N!
#Space complexity: N

     
        




class Solution:
    def __init__(self):
        self.ans = []
    
    def recurperm(self,nums,ds,freq):
    
        if len(ds)==len(nums):
            self.ans.append(ds.copy())  # Copy is used is answer contains all [  [ ], [ ], [  ]   ]
            return  

        for i in range(0,len(nums)):
            if freq[i]==0:
                freq[i]=True
                ds.append(nums[i])
                self.recurperm(nums,ds,freq)
                ds.remove(ds[len(ds)-1])
                freq[i]=False

    def permute(self, nums: List[int]) -> List[List[int]]:
        ds=[]
        freq=[0]*len(nums)
        self.recurperm(nums,ds,freq)
        return self.ans
  
  #OPTIMIZED 3      
 
import itertools
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        if nums==[] or len(nums)<=1:
            return
        i=len(nums)-2
        index1=-1
        while(i>=0):
            if nums[i]<nums[i+1]:
                index1=i
                break
            i=i-1
        if index1>=0:
            j=len(nums)-1
            while(j>=0):
                if nums[j]>nums[index1]:
                    index2=j
                    break
                j=j-1
            nums[index1],nums[index2]=nums[index2],nums[index1]
        
        self.reverse(nums,index1+1)
        
    def reverse(nums,i):
        
        
            
            
            
            
        
                
        
        

        
        
        
        
        

            
            
                
            

    
 
 
 
 
 
4.Rotate Image by 90 degree

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None;
        """
       #Brute Force Solution
        m=len(matrix)
        n=len(matrix[0])
        #IMP ***** INItialize empty matrix
        dummy = [[0] * m for i in range(n)]
        
        for i in range(0,n):
            for j in range(0,n):
                dummy[j][n-i-1]=matrix[i][j]
        print(dummy)       
         
        """
        #Optimal Solution 
        # Transpose and Reverse
        # In Transpose and Reverse we use a temp
        m=len(matrix)
        n=len(matrix[0])
        for i in range(0,n):
            for j in range(i,n):
                temp=matrix[i][j]
                matrix[i][j]=matrix[j][i]
                matrix[j][i]=temp
        for i in range(0,n):
            for j in range(0,n//2):
                temp=matrix[i][j]
                matrix[i][j]=matrix[i][n-j-1]
                matrix[i][n-j-1]=temp
